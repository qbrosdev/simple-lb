package com.qbros.lb.core;

import lombok.extern.slf4j.Slf4j;

import java.util.Objects;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicInteger;

@Slf4j
public class Provider {

    //the name attribute can be used to easily identify which massage is produced by which provider
    private final String id;
    //this is the unique message generated by provider.
    private final String uniqueMsg;
    //defines the number of concurrent clients it can service
    private final AtomicInteger concurrentCapacity;
    //use volatile to ensure thread visibility
    private volatile boolean isAlive;

    public Provider() {
        this(5);
    }

    public Provider(int concurrentCapacity) {
        this(UUID.randomUUID().toString());
    }

    /**
     * @param id this should be unique among different instances of providers.
     *           If you can provide unique ids use {@link #Provider(int)} or {@link #Provider()}
     */
    public Provider(String id) {
        this(id, 5);
    }

    public Provider(String id, int concurrentCapacity) {
        this(id, UUID.randomUUID().toString(), concurrentCapacity);
    }

    public Provider(String id, String uniqueMsg, int concurrentCapacity) {
        this.id = id;
        this.uniqueMsg = uniqueMsg;
        this.isAlive = true;
        this.concurrentCapacity = new AtomicInteger(concurrentCapacity);
        log.info("Provider initialized [{}]", this);
    }

    public String provide() {
        concurrentCapacity.decrementAndGet();
        String result = String.format("%S Provided by %S", uniqueMsg, id);
        concurrentCapacity.incrementAndGet();
        return result;
    }

    public int getConcurrentCapacity() {
        return concurrentCapacity.get();
    }

    public String getId() {
        return id;
    }

    /**
     * Step 6 – Heart beat checker
     * The load balancer should invoke every X seconds each of its registered providers on a special
     * method called check() to discover if they are alive
     * – if not, it should exclude the provider node from load balancing.
     *
     * @return {@code true} if the provider is alive and can service, otherwise returns {@code false}
     */
    public boolean isAlive() {
        return isAlive;
    }

    public void setAlive(boolean alive) {
        isAlive = alive;
    }

    @Override
    public String toString() {
        return "Provider{" +
                "id='" + id + '\'' +
                ", isAlive=" + isAlive +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Provider provider = (Provider) o;
        return id.equals(provider.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
}
